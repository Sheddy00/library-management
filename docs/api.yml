openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: books
  - name: authors
  - name: topics
paths:
  /books:
    get:
      tags:
        - "books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateStart
          description: Filter books with a release date greater than or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books with a release date less than or equal to this date
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - "books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupDateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "books"
      summary: Update the author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string 
          description: ID of the book to update
        - in: path
          name: authorId
          required: true
          schema:
            type: string 
          description: ID of the author to associate with the book
      responses:
        200:
          description: Author of the book updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /books/authors:
    put:
      tags:
        - "books"
      summary: Update authors for multiple books
      operationId: updateMultipleBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Authors of multiple books updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get: 
      tags:
        - "authors"
      summary: Get all authors
      description: Show all authors filter by  name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter return authors by given name
          required: false
          schema: 
            type: string
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: Authors filtered
          content:
            application/json:
              schema :
                type: array
                items:
                  $ref: '#/components/schemas/author'
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - "authors"
      summary: Create || update a author
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema : 
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - "authors"
      summary: Delete list of authors
      responses:
        200:
          description: Deleting author successfully !
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /books/{bookid}/topics/{topicId}:
    put:
      tags:
        - "topics"
      summary: Update the topic of a book
      operationId: updateBookAuthor
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookTopic"
      responses:
        200:
          description: topic of the book updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /books/topics:
    put:
      tags:
        - "topics"
      summary: Update topics for multiple books
      operationId: updateMultipleBookTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/topic'
      responses:
        200:
          description: Authors of multiple books updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /Topic:
    get:
      tags:
        - "topics"
      summary: Get all topics
      description: Show all topics.
      operationId: getTopics
      parameters:
        - in: query
          name: topicName
          description: Return topic
          required: false
          schema: 
            type: string
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          description: Topics showed
          content:
            application/json:
              schema :
                type: array
                items:
                  $ref: '#/components/schemas/topic'
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - "topics"
      summary: Create or update topic
      operationId: crupdateTopics
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/CrupDateTopic'
      responses:
        200:
          description: The list of created or updated topic
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/topic'
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - "topics"
      summary: delete list of topic
      responses:
        200:
          description: Deleting topic successfully 
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /authorTopic:
    get:
      tags:
        - "topics"
      summary: associate topic and author
      description: Show all authors and topic.
      operationId: getAuthorsTopic
      parameters:
        - in: query
          name: authorTopic
          description: Return authors and topic
          required: true
          schema: 
            type: string
      responses:
        200:
          description: Author and topic showed
          content:
            application/json:
              schema :
                type: array
                items:
                  $ref: '#/components/schemas/authorTopic'
        400:
          description: Bad request
          content:
            application/json:
              schema :
                type: object
                properties:
                  error:
                    type: string
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
        500: 
          description: Internal Server Error 
          content:
            application/json:
              schema: 
                type: object
                properties:
                  error:
                    type: string
  /book/import:
    post: 
      tags:
        - "books"
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                excelData:
                  type: array
                  items:
                    $ref: '#/components/schemas/ExcelBook'
                jsonData:
                  type: array
                  items:
                    $ref: '#/components/schemas/JsonBook'
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors/import:
    post:
      tags:
        - "authors"
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  excelData:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExcelAuthor'
                  jsonData:
                    type: array
                    items:
                      $ref: '#/components/schemas/JsonAuthor'
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
components:
  schemas:
    ExcelBook:
      type: object
      properties:
        book: 
          $ref: '#/components/schemas/Book'
    JsonBook:
      allOf:
        - $ref: '#/components/schemas/ExcelBook'
    ExcelAuthor:
        $ref: "#/components/schemas/authorNoId"
    JsonAuthor:
      $ref: '#/components/schemas/ExcelAuthor'
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupDateBook'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/author'
    author:
      type : object
      properties: 
        id:
          type: string
        name : 
          type: string
        sex: 
          type: string 
          enum:
            - M
            - F
    authorTopic: 
      allOf:
        - $ref: '#/components/schemas/authorNoId'
        - type: object
          properties:
            topic: 
              $ref: '#/components/schemas/topicNoId'
    authorNoId:
      type: object
      properties:
        name : 
          type: string
        sex: 
          type: string 
          enum:
            - M
            - F
    CrupDateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: the book ID
        authorId:
          type: string
          description: the author ID
    CrupDateTopic:
      type: object
      properties:
        topicName:
          type: string
    topic:
      type: object
      properties:
        id:
          type: string
        topicName:
          type: string
    topicNoId:
      type: object
      properties:
        topicName:
          type: string
    UpdateBookTopic:
      type: object
      properties:
        id:
          type: string
    genericResponse:
      type: object
      properties:
        body:
          type: object
  responses:
    successfulResponse:
      allOf:
        - $ref: '#/components/schemas/genericResponse'
        - properties:
            status:
              type: string
              enum:
                - success
    errorResponse:
      allOf:
        - $ref: '#/components/schemas/genericResponse'
        - properties:
            status:
              type: string
              enum:
                - error
            error:
              type: string
  parameters:
    Page:
      name: page
      description: Number for pagination
      in: query
      schema: 
        type: integer
        default: 1
      required: false
    PageSize:
      name: pageSize 
      description: Size of pagination
      in: query 
      schema: 
        type: integer
        default: 30
      required: false
    queryPagination:
      name: queryPagination 
      description: reusable pagination
      in: query 
      schema: 
        type: object
        properties:
          page:
            $ref: '#/components/parameters/Page'
          PageSize:
            $ref: '#/components/parameters/PageSize'
      required: false