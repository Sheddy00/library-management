openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22001
servers:
  - url: https://library.com
tags:
  - name: books
  - name: authors
  - name: topics
paths:
  /books:
    get:
      tags:
        - "books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateStart
          description: Filter books with a release date greater than or equal to this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books with a release date less than or equal to this date
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupDateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "books"
      summary: Update the author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string 
          description: ID of the book to update
        - in: path
          name: authorId
          required: true
          schema:
            type: string 
          description: ID of the author to associate with the book
      responses:
        200:
          description: Author of the book updated successfully
  /books/authors:
    put:
      tags:
        - "books"
      summary: Update authors for multiple books
      operationId: updateMultipleBookAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Authors of multiple books updated successfully
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get: 
      tags:
        - "authors"
      summary: Get all authors
      description: Show all authors filter by  name.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter return authors by given name
          required: false
          schema: 
            type: string
      responses:
        200:
          description: Authors filtered
          content:
            application/json:
              schema :
                type: array
                items:
                  $ref: '#/components/schemas/author'
    put:
      tags:
        - "authors"
      summary: Create || update a author
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema : 
              type: array
              items:
                $ref: '#/components/schemas/author'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/author'
    delete:
      tags:
        - "authors"
      summary: Delete list of authors
      responses:
        200:
          description: Deleting author successfully !
  /Topic:
    get:
      tags:
        - "topics"
      summary: Get all topics
      description: Show all topics.
      operationId: getTopics
      parameters:
        - in: query
          name: topicName
          description: Return topic
          required: false
          schema: 
            type: string
      responses:
        200:
          description: Topics showed
          content:
            application/json:
              schema :
                type: array
                items:
                  $ref: '#/components/schemas/topic'
    put:
      tags:
        - "topics"
      summary: Create or update topic
      operationId: crupdateTopics
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/CrupDateTopic'
      responses:
        200:
          description: The list of created or updated topic
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/topic'
    delete:
      tags:
        - "topics"
      summary: delete list of topic
      responses:
        200:
          description: Deleting topic successfully 
components:
  schemas:
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupDateBook'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/author'
    author:
      type : object
      properties: 
        id:
          type: string
        name : 
          type: string
        sex: 
          type: string 
          enum:
            - M
            - F
    CrupDateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: the book ID
        authorId:
          type: string
          description: the author ID
    CrupDateTopic:
      type: object
      properties:
        topicName:
          type: string
    topic:
      type: object
      properties:
        id:
          type: string
        topicName:
          type: string